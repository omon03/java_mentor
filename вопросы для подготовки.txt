1) что такое ООП.
		методология программирования, 
		основанная на представлении программы в виде совокупности объектов, 
		каждый из которых является экземпляром определённого класса, 
		а классы образуют иерархию наследования.

2) принципы ООП
		Абстракция — отделение концепции от ее экземпляра;
		
		Полиморфизм — реализация задач одной и той же идеи разными способами;
		
		Наследование — способность объекта или класса базироваться на другом объекте или классе. 
				Это главный механизм для повторного использования кода. 
				Наследственное отношение классов четко определяет их иерархию;
		
		Инкапсуляция — размещение одного объекта или класса внутри другого для разграничения доступа к ним.

3) Модификаторы доступа
		private: класс
		Пакет (нет модификатора): класс 	пакет
		protected: класс	пакет	 наследник
		public: всем

4) Указатели this и super.

5) Модификатор static

6) Наследование и реализация.

7) Интерфейсы.

8) Анонимные классы.

9) Класс Object и класс Class.

10) Контракт между  equals() и hashCode().







1.  Что такое инкапсуляция? 
	Приведите пример инкапсуляции?


2.  Что такое полиморфизм? 
	Приведите пример полиморфизма?


3.  Что будет если передать массив в метод, который изменит его значения, изменятся ли они вне метода? -- да.
	Почему? -- это ссылка.
	А если передать примитив?  --  Java передает все по значению!

5.  Передача параметров по ссылке или по значению?  --  Java передает все по значению!
	Как передаются объекты в метод?  --  Java передает все по значению!


4.  Что такое нативные методы, их плюсы и минусы? -- 


5.  Перечислите все модификаторы доступа в порядке уменьшения закрытости, какую область видимости они имеют?


6.  Какие модификаторы доступа могут быть у класса? -- Класс и интерфейсы не могут быть private или protected.


7.  Как реализована неизменность String?


8.  Можно ли использовать статические методы в обычных (этого же класса)? -- да
	Наоборот? -- нет
	Почему? -- для вызова обычного метода должен быть объект


9.  Что такое конструкторы? -- для создания объекта
	Конструктор по-умолчанию?  -- без параметров


10. Можно ли в классе вызвать один конструктор из другого? -- да.
	Как это сделать? -- this();


11. Класс Object, все методы кроме wait, notify, notifyAll, назвать и объяснить, как работают


12. Перечислите методы именно класса Enum?


13. Назовите контракт между equals и hashcode?


14. Что такое интерфейс? 
	Когда использовать интерфейс?


15. Какие методы в интерфейсе могут иметь реализацию? --(дефолтные) остальные методы публичны и абстрактны


16. Синтаксические отличия интерфейса от абстрактного класса (АК)? 
	5 отличий:
		- abstract/interface
		- extends/implements
		- можно defolt/ --
		- Абстрактные классы могут иметь конструкторы
		- 


17. Может ли быть абстрактный класс без абстрактных методов? -- да. Наоборот нельзя!


18. Может ли быть конструктор у абстрактного класса? -- да.
	Для чего? -- нельзя создать объект, но вызывается первой строкой в конструкторе потомка.

